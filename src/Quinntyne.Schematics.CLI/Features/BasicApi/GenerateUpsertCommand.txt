using {{ rootNamespace }}.Domain.DataAccess;
using {{ rootNamespace }}.Domain.Models;
using FluentValidation;
using MediatR;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace {{ namespace }}
{
    public class Upsert{{ entityNamePascalCase }}
    {

        public class Validator: AbstractValidator<Request> {
            public Validator()
            {
                RuleFor(request => request.{{ entityNamePascalCase }}).NotNull();
                RuleFor(request => request.{{ entityNamePascalCase }}).SetValidator(new {{ entityNamePascalCase }}DtoValidator());
            }
        }

        public class Request : IRequest<Response> {
            public {{ entityNamePascalCase }}Dto {{ entityNamePascalCase }} { get; set; }
        }

        public class Response
        {
            public Guid {{ entityNamePascalCase }}Id { get;set; }
        }

        public class Handler : IRequestHandler<Request, Response>
        {
            public IAppDbContext _context { get; set; }
            public Handler(IAppDbContext context) => _context = context;

            public async Task<Response> Handle(Request request, CancellationToken cancellationToken) {
                var {{ entityNameCamelCase }} = await _context.{{ entityNamePascalCasePlural }}.FindAsync(request.{{ entityNamePascalCase }}.{{ entityNamePascalCase }}Id);

                if ({{ entityNameCamelCase }} == null) {
                    {{ entityNameCamelCase }} = new {{ entityNamePascalCase }}();
                    _context.{{ entityNamePascalCasePlural }}.Add({{ entityNameCamelCase }});
                }

                {{ entityNameCamelCase }}.Name = request.{{ entityNamePascalCase }}.Name;

                await _context.SaveChangesAsync(cancellationToken);

                return new Response() { {{ entityNamePascalCase }}Id = {{ entityNameCamelCase }}.{{ entityNamePascalCase }}Id };
            }
        }
    }
}
