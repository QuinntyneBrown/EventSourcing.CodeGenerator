using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;

namespace {{ namespace }}
{
    [Authorize]
    [ApiController]
    [Route("api/{{ entityNameCamelCasePlural }}")]
    public class {{ entityNamePascalCasePlural }}Controller
    {
        private readonly IMediator _mediator;

        public {{ entityNamePascalCasePlural }}Controller(IMediator mediator) => _mediator = mediator;

        [HttpPost]
        public async Task<ActionResult<Create{{ entityNamePascalCase }}Command.Response>> Create(Create{{ entityNamePascalCase }}Command.Request request)
            => await _mediator.Send(request);

        [HttpPut]
        public async Task<ActionResult<Update{{ entityNamePascalCase }}Command.Response>> Update([FromBody]Update{{ entityNamePascalCase }}Command.Request request)
            => await _mediator.Send(request);
        
        [HttpDelete("{{{ entityNameCamelCase }}Id}")]
        public async Task Remove([FromRoute]Remove{{ entityNamePascalCase }}Command.Request request)
            => await _mediator.Send(request);            

        [HttpGet("{{{ entityNameCamelCase }}Id}")]
        public async Task<ActionResult<Get{{ entityNamePascalCase }}ByIdQuery.Response>> GetById([FromRoute]Get{{ entityNamePascalCase }}ByIdQuery.Request request)
            => await _mediator.Send(request);

        [HttpGet]
        public async Task<ActionResult<Get{{ entityNamePascalCasePlural }}Query.Response>> Get()
            => await _mediator.Send(new Get{{ entityNamePascalCasePlural }}Query.Request());
    }
}