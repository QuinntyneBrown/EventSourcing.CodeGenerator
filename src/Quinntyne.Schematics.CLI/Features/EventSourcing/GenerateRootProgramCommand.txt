using Infrastructure.Data;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Linq;

namespace {{ namespace }}
{
    public class Program
    {
        public static void Main(string[] args)
        {
            IWebHost host = CreateWebHostBuilder().Build();

            ProcessDbCommands(args, host);

            host.Run();
        }

        public static IWebHostBuilder CreateWebHostBuilder() =>
            WebHost.CreateDefaultBuilder()
                .UseStartup<Startup>();

        public static void ProcessDbCommands(string[] args, IWebHost host) {
            var services = (IServiceScopeFactory)host.Services.GetService(typeof(IServiceScopeFactory));
            
            using (var scope = services.CreateScope())
            {
                var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
                var mediator = scope.ServiceProvider.GetRequiredService<IMediator>();
                var queue = scope.ServiceProvider.GetRequiredService<IBackgroundTaskQueue>();
                var backgroundService = new QueuedHostedService(queue);

                var eventStore = new EventStore(context, mediator, queue,services);
                
                if (args.Contains("ci"))
                    args = new string[4] { "dropdb", "migratedb", "seeddb", "stop" };

                if (args.Contains("dropdb"))
                    context.Database.EnsureDeleted();

                if (args.Contains("migratedb"))
                    context.Database.Migrate();

                if (args.Contains("seeddb"))
                {
                    context.Database.EnsureCreated();
                    AppInitializer.Seed(eventStore);
                    backgroundService.StartAsync(default(CancellationToken)).GetAwaiter().GetResult();
                }
                
                if (args.Contains("stop"))
                    Environment.Exit(0);
            }
        }

        public static AppDbContext GetDbContext(IServiceScope serviceScope)
            => serviceScope.ServiceProvider.GetRequiredService<AppDbContext>();

        public static IHttpContextAccessor GetHttpContextAccessor(IServiceScope serviceScope)
            => serviceScope.ServiceProvider.GetRequiredService<IHttpContextAccessor>();

        public static void SeedContext(AppDbContext context)
        {

        }
    }
}
