using {{ rootNamespace }}.Core.Interfaces;
using {{ rootNamespace }}.Core.Models;
using FluentValidation;
using MediatR;
using System.Threading.Tasks;
using System.Threading;
using System;

namespace {{ namespace }}
{
    public class Create{{ entityNamePascalCase }}Command
    {
        public class Validator: AbstractValidator<Request> {
            public Validator()
            {
                RuleFor(request => request.{{ entityNamePascalCase }}.{{ entityNamePascalCase }}Id).NotNull();
            }
        }

        public class Request : IRequest<Response> {
            public {{ entityNamePascalCase }}Dto {{ entityNamePascalCase }} { get; set; }
        }

        public class Response
        {			
            public Guid {{ entityNamePascalCase }}Id { get; set; }
        }

        public class Handler : IRequestHandler<Request, Response>
        {
            private readonly IEventStore _eventStore;
            
			public Handler(IEventStore eventStore) => _eventStore = eventStore;

            public Task<Response> Handle(Request request, CancellationToken cancellationToken)
            {
                var {{ entityNameCamelCase }} = new {{ entityNamePascalCase }}(request.{{ entityNamePascalCase }}.Name);

                _eventStore.Save({{ entityNameCamelCase }});
                
                return Task.FromResult(new Response() { {{ entityNamePascalCase }}Id = {{ entityNameCamelCase }}.{{ entityNamePascalCase }}Id });
            }
        }
    }
}
