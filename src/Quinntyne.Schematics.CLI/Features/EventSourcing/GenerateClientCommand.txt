using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System.Net.Http;
using System.Threading.Tasks;
using {{ rootNamespace }}.Infrastructure.Extensions;

namespace {{ namespace }}
{
    public class {{ entityNamePascalCasePlural }}Client: BaseClient<{{ entityNamePascalCasePlural }}Client>
    {        
        public {{ entityNamePascalCasePlural }}Client(HttpClient client, ILogger<{{ entityNamePascalCasePlural }}Client> logger)
            :base(client,logger)
        { }

        public async Task<dynamic> Get()
        {
			return await _client.GetAsync<dynamic>("api/{{ entityNameLowerCasePlural }}");                
        }

        public async Task<dynamic> GetById(int {{ entityNameCamelCase }}Id)
        {
			return await _client.GetAsync<dynamic>($"api/{{ entityNameLowerCasePlural }}/{{{ entityNameCamelCase }}Id}");
        }

        public async Task<dynamic> Save(dynamic {{ entityNameCamelCase }})
        {
            var content = new StringContent(JsonConvert.SerializeObject(new {
                {{ entityNamePascalCase }} = {{ entityNameCamelCase }}
            }));

            return await _client.PostAsync<dynamic>("api/{{ entityNameLowerCasePlural }}",content);
        }

        public async Task<dynamic> Remove(int {{ entityNameCamelCase }}Id)
        {
			return await _client.DeleteAsync<dynamic>($"api/{{ entityNameLowerCasePlural }}/{{{ entityNameCamelCase }}Id}");
        }
    }
}
