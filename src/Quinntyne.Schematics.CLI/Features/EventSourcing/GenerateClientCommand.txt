using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System.Net.Http;
using System.Threading.Tasks;
using Infrastructure.Extensions;
using Microsoft.AspNetCore.Http;

namespace {{ namespace }}
{
    public class {{ entityNamePascalCasePlural }}Client: BaseClient<{{ entityNamePascalCasePlural }}Client>
    {        
        public {{ entityNamePascalCasePlural }}Client(HttpClient client, ILogger<{{ entityNamePascalCasePlural }}Client> logger, IHttpContextAccessor httpContextAccessor)
            :base(client,logger,httpContextAccessor)
        { }

        public async Task<dynamic> Get()
        {
            try
            {
                return await _client.GetAsync<dynamic>("api/{{ entityNameLowerCasePlural }}");                
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError($"An error occured connecting to {{ entityNamePascalCasePlural }} API {ex.ToString()}");

                throw ex;
            }
        }

        public async Task<dynamic> GetById(int {{ entityNameCamelCase }}Id)
        {
            try
            {
                return await _client.GetAsync<dynamic>($"api/{{ entityNameLowerCasePlural }}/{{{ entityNameCamelCase }}Id}");
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError($"An error occured connecting to {{ entityNamePascalCasePlural }} API {ex.ToString()}");

                throw ex;
            }
        }

        public async Task<dynamic> Save(dynamic {{ entityNameCamelCase }})
        {
            try
            {
                var content = new StringContent(JsonConvert.SerializeObject(new {
                    {{ entityNamePascalCase }} = {{ entityNameCamelCase }}
                }));

                return await _client.PostAsync<dynamic>("api/{{ entityNameLowerCasePlural }}",content);
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError($"An error occured connecting to {{ entityNamePascalCasePlural }} API {ex.ToString()}");

                throw ex;
            }
        }

        public async Task<dynamic> Remove(int {{ entityNameCamelCase }}Id)
        {
            try
            {
                return await _client.DeleteAsync<dynamic>($"api/{{ entityNameLowerCasePlural }}/{{{ entityNameCamelCase }}Id}");
            }
            catch (HttpRequestException ex)
            {
                _logger.LogError($"An error occured connecting to {{ entityNamePascalCasePlural }} API {ex.ToString()}");

                throw ex;
            }
        }
    }
}
