using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using {{ serviceNamePascalCase }}.Features.{{ entityNamePascalCasePlural }};
using {{ rootNamespace }}.SPA.Clients;

namespace {{ namespace }}
{
    [Authorize]
    [ApiController]
    [Route("api/{{ entityNameLowerCasePlural }}")]
    public class {{ entityNamePascalCase }}Controller
    {
        private readonly {{ entityNamePascalCasePlural }}Client _client;

        public {{ entityNamePascalCase }}Controller({{ entityNamePascalCasePlural }}Client client) => _client = client;

        [HttpPost]
        public async Task<ActionResult<Save{{ entityNamePascalCase }}Command.Response>> Save(Save{{ entityNamePascalCase }}Command.Request request)
            => await _client.Save(request);

        [HttpDelete("{{{ entityNamePascalCase }}.{{ entityNamePascalCase }}Id}")]
        public async Task Remove(Remove{{ entityNamePascalCase }}Command.Request request)
            => await _client.Remove(request);

        [HttpGet("{{{ entityNamePascalCase }}Id}")]
        public async Task<ActionResult<Get{{ entityNamePascalCase }}ByIdQuery.Response>> GetById([FromRoute]Get{{ entityNamePascalCase }}ByIdQuery.Request request)
            => await _client.GetById(request);

        [HttpGet]
        public async Task<ActionResult<Get{{ entityNamePascalCasePlural }}Query.Response>> Get()
            => await _client.Get();
    }
}
