using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using AzureServiceFabricPOC.ServiceFabric.SPA.Clients;

namespace {{ namespace }}
{
    [ApiController]
    [Route("api/{{ entityNameLowerCasePlural }}")]
    public class {{ entityNamePascalCase }}Controller
    {
        private readonly {{ entityNamePascalCasePlural }}Client _client;

        public {{ entityNamePascalCase }}Controller({{ entityNamePascalCasePlural }}Client client) => _client = client;

        [HttpPost]
        public async Task<ActionResult<dynamic>> Save(dynamic request, [FromHeader(Name = "Authorization")]string oauth2Header)
            => await _client.Save(request, oauth2Header);

        [HttpDelete("{{{ entityNameCamelCase }}Id}/{concurrencyVersion}")]
        public async Task Remove(int {{ entityNameCamelCase }}Id, int concurrencyVersion, [FromHeader(Name = "Authorization")]string oauth2Header)
            => await _client.Remove({{ entityNameCamelCase }}Id, concurrencyVersion, oauth2Header);

        [HttpGet("{{{ entityNameCamelCase }}Id}")]
        public async Task<ActionResult<dynamic>> GetById([FromRoute]int {{ entityNameCamelCase }}Id, [FromHeader(Name = "Authorization")]string oauth2Header)
            => await _client.GetById({{ entityNameCamelCase }}Id, oauth2Header);

        [HttpGet]
        public async Task<ActionResult<dynamic>> Get([FromHeader(Name = "Authorization")]string oauth2Header)
            => await _client.Get(oauth2Header);
    }
}
