using Infrastructure.Extensions;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using {{ serviceNamePascalCase }}.Features.{{ entityNamePascalCasePlural }};
using Infrastructure.Configuration;
using Microsoft.Extensions.Options;

namespace {{ namespace }}
{
    [Authorize]
    [ApiController]
    [Route("api/{{ entityNameLowerCasePlural }}")]
    public class {{ entityNamePascalCasePlural }}Controller
    {
        private readonly IHttpClientFactory _httpClientFactory;
        private readonly string _baseUrl;

        public {{ entityNamePascalCasePlural }}Controller(IHttpClientFactory httpClientFactory, IOptions<ClusterSettings> options)
        {
            _httpClientFactory = httpClientFactory;
            _baseUrl = options.Value.{{ serviceNamePascalCase }}BaseUrl;
        }

        [HttpPost]
        public async Task<ActionResult<Save{{ entityNamePascalCase }}Command.Response>> Save(Save{{ entityNamePascalCase }}Command.Request request)
        {
            var client = _httpClientFactory.CreateClient();

            return await client.PostAsync<Save{{ entityNamePascalCase }}Command.Response>($"{_baseUrl}/api/{{ entityNameLowerCasePlural }}", new StringContent(JsonConvert.SerializeObject(request)));
        }

        [HttpDelete("{{{ entityNamePascalCase }}.{{ entityNamePascalCase }}Id}")]
        public async Task Remove(Remove{{ entityNamePascalCase }}Command.Request request)
        {
            var client = _httpClientFactory.CreateClient();

            await client.DeleteAsync($"{_baseUrl}/api/{{ entityNameLowerCasePlural }}/{request.{{ entityNamePascalCase }}.{{ entityNamePascalCase }}Id}");
        }

        [HttpGet("{{{ entityNamePascalCase }}Id}")]
        public async Task<ActionResult<Get{{ entityNamePascalCase }}ByIdQuery.Response>> GetById([FromRoute]Get{{ entityNamePascalCase }}ByIdQuery.Request request)
        {
            var client = _httpClientFactory.CreateClient();

            return await client.GetAsync<Get{{ entityNamePascalCase }}ByIdQuery.Response>($"{_baseUrl}/api/{{ entityNameLowerCasePlural }}/{request.{{ entityNamePascalCase }}Id}");
        }

        [HttpGet]
        public async Task<ActionResult<Get{{ entityNamePascalCasePlural }}Query.Response>> Get()
        {
            var client = _httpClientFactory.CreateClient();

            return await client.GetAsync<Get{{ entityNamePascalCasePlural }}Query.Response>($"{_baseUrl}/api/{{ entityNameLowerCasePlural }}");
        }
    }
}