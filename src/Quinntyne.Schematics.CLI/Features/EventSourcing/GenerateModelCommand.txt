using {{ rootNamespace }}.Core.Common;
using {{ rootNamespace }}.Core.DomainEvents;
using System;

namespace {{ namespace }}
{
    public class {{ entityNamePascalCase }}: Entity
    {
        public {{ entityNamePascalCase }}(string name)
            => Apply(new {{ entityNamePascalCase }}Created(name,{{ entityNamePascalCase }}Id));

        public Guid {{ entityNamePascalCase }}Id { get; set; } = Guid.NewGuid();          
		public string Name { get; set; }        
		public {{ entityNamePascalCase }}Status Status { get; set; }
		public int Version { get; set; }

        protected override void EnsureValidState()
        {
            
        }

        protected override void When(object @event)
        {
            switch (@event)
            {
                case {{ entityNamePascalCase }}Created {{ entityNameCamelCase }}Created:
                    Name = {{ entityNameCamelCase }}Created.Name;
					{{ entityNamePascalCase }}Id = {{ entityNameCamelCase }}Created.{{ entityNamePascalCase }}Id;
					Status = {{ entityNamePascalCase }}Status.Active;
                    break;

                case {{ entityNamePascalCase }}NameChanged {{ entityNameCamelCase }}NameChanged:
                    Name = {{ entityNameCamelCase }}NameChanged.Name;
					Version++;
                    break;

                case {{ entityNamePascalCase }}Removed {{ entityNameCamelCase }}Removed:
                    Status = {{ entityNamePascalCase }}Status.InActive;
					Version++;
                    break;
            }
        }

        public void ChangeName(string name)
            => Apply(new {{ entityNamePascalCase }}NameChanged(name));

        public void Remove()
            => Apply(new {{ entityNamePascalCase }}Removed());
    }

    public enum {{ entityNamePascalCase }}Status
    {
        Active,
        InActive
    }
}
