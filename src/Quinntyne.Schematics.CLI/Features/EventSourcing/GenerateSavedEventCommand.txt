using {{ rootNamespace }}.Core;
using {{ rootNamespace }}.Core.Models;
using MediatR;
using Microsoft.AspNetCore.SignalR;
using System.Threading;
using System.Threading.Tasks;

namespace {{ namespace }}
{
    public class {{ entityNamePascalCase }}SavedEvent
    {
        public class DomainEvent : INotification
        {
            public DomainEvent({{ entityNamePascalCase }} {{ entityNameCamelCase }}) => {{ entityNamePascalCase }} = {{ entityNameCamelCase }};
            public {{ entityNamePascalCase }} {{ entityNamePascalCase }} { get; set; }
        }

        public class Handler : INotificationHandler<DomainEvent>
        {
            private readonly IHubContext<IntegrationEventsHub> _hubContext;

            public Handler(IHubContext<IntegrationEventsHub> hubContext)
                => _hubContext = hubContext;

            public async Task Handle(DomainEvent notification, CancellationToken cancellationToken) {
                await _hubContext.Clients.All.SendAsync("message", new {
                    Type = "[{{ entityNamePascalCase }}] Saved",
                    Payload = new { {{ entityNameCamelCase }} = {{ entityNamePascalCase }}ApiModel.From{{ entityNamePascalCase }}(notification.{{ entityNamePascalCase }}) }
                }, cancellationToken);
            }
        }
    }
}