using {{ rootNamespace }}.Core.DomainEvents;
using {{ rootNamespace }}.Core.Interfaces;
using {{ rootNamespace }}.Core.Models;
using FluentValidation;
using MediatR;
using System.Threading.Tasks;
using System.Threading;

namespace {{ namespace }}
{
    public class Remove{{ entityNamePascalCase }}Command
    {
        public class Validator : AbstractValidator<Request>
        {
            public Validator()
            {
                RuleFor(request => request.{{ entityNamePascalCase }}Id).NotEqual(0);
            }
        }

        public class Request : IRequest
        {
            public int {{ entityNamePascalCase }}Id { get; set; }
        }

        public class Handler : IRequestHandler<Request>
        {
            public IAppDbContext _context { get; set; }
            
			public Handler(IAppDbContext context) => _context = context;

            public async Task Handle(Request request, CancellationToken cancellationToken)
            {
                var {{ entityNameCamelCase }} = await _context.{{ entityNamePascalCasePlural }}.FindAsync(request.{{ entityNamePascalCase }}Id);
                _context.{{ entityNamePascalCasePlural }}.Remove({{ entityNameCamelCase }});
                {{ entityNameCamelCase }}.RaiseDomainEvent(new {{ entityNamePascalCase }}Removed({{ entityNameCamelCase }}.{{ entityNamePascalCase }}Id));
                await _context.SaveChangesAsync(cancellationToken);
            }
        }
    }
}
