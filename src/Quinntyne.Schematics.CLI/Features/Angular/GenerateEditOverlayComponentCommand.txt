import { Component } from "@angular/core";
import { Subject, BehaviorSubject } from "rxjs";
import { FormGroup, FormControl } from "@angular/forms";
import { OverlayRefWrapper } from "../core/overlay-ref-wrapper";
import { {{ entityNamePascalCase }} } from "./{{ entityNameSnakeCase }}.model";
import { map, switchMap, tap, takeUntil } from "rxjs/operators";
import { OverlayRefWrapper } from '@{{ rootNamespace }}/shared';
import { {{ entityNamePascalCase }} } from '@{{ rootNamespace }}/domain';

@Component({
  templateUrl: "./{{ nameSnakeCase }}.component.html",
  styleUrls: ["./{{ nameSnakeCase }}.component.css"],
  selector: "{{ rootNamespace }}-{{ nameSnakeCase }}",
  host: { 'class': 'mat-typography' }
})
export class {{ namePascalCase }}Component { 
  constructor(
    private _{{ entityNameCamelCase }}Service: {{ entityNamePascalCase }}Service,
    private _overlay: OverlayRefWrapper) { }

  ngOnInit() {
    if (this.{{ entityNameCamelCase }}Id)
      this._{{ entityNameCamelCase }}Service.getById(this.{{ entityNameCamelCase }}Id)
        .pipe(
          map(x => this.{{ entityNameCamelCase }}$.next(x)),
          switchMap(x => this.{{ entityNameCamelCase }}$),
          map(x => this.form.patchValue({
            name: x.name
          }))
        )
        .subscribe();
  }

  public onDestroy: Subject<void> = new Subject<void>();

  ngOnDestroy() {
    this.onDestroy.next();	
  }

  public {{ entityNameCamelCase }}$: BehaviorSubject<{{ entityNamePascalCase }}> = new BehaviorSubject(<{{ entityNamePascalCase }}>{});
  
  public {{ entityNameCamelCase }}Id: string;

  public handleCancelClick() {
    this._overlay.close();
  }

  public handleSaveClick() {
    const {{ entityNameCamelCase }} = new {{ entityNamePascalCase }}();
    {{ entityNameCamelCase }}.{{ entityNameCamelCase }}Id = this.{{ entityNameCamelCase }}Id;
    {{ entityNameCamelCase }}.name = this.form.value.name;
    this._{{ entityNameCamelCase }}Service.create({ {{ entityNameCamelCase }} })
      .pipe(
        map(x => {{ entityNameCamelCase }}.{{ entityNameCamelCase }}Id = x.{{ entityNameCamelCase }}Id),
        tap(x => this._overlay.close({{ entityNameCamelCase }})),
        takeUntil(this.onDestroy)
      )
      .subscribe();
  }

  public form: FormGroup = new FormGroup({
    name: new FormControl(null, [])
  });
} 
